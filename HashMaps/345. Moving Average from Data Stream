//Problem: 346. Moving Average from Data Stream: https://leetcode.com/problems/moving-average-from-data-stream/
//Asked in Google Follow Up: Remove top X elements and then compute the average: multiset approach used. 

Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the MovingAverage class:

MovingAverage(int size) Initializes the object with the size of the window size.
double next(int val) Returns the moving average of the last size values of the stream.
 

Example 1:

Input
["MovingAverage", "next", "next", "next", "next"]
[[3], [1], [10], [3], [5]]
Output
[null, 1.0, 5.5, 4.66667, 6.0]

Explanation
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3

```
class MovingAverage {
public:
    queue<int> q;
    int n;
    int window_sum = 0;

    MovingAverage(int size) {
        n = size;
    }
    
    double next(int val) {
        q.push(val);
        window_sum += val;

        if(q.size() > n){
            int excludeNum = q.front();
            q.pop();
            window_sum -= excludeNum;
        }
        return (double) window_sum/q.size();
    }
};


```
